package com.study._31_NestedClass.nested_inner;

public class Main {
    public static void main(String[] args) {

        // 바깥인스턴스가 생성되고 -> 내부 클래스가 생성 되어야 한다.
        // Question.Choice choice = new Question.Choice("선택지", 1) 불가능

        Question q1 = new Question(1, "내부 클래스의 특징으로 올바른 것은?");

        // 권장사항 X
        //Question.Choice choice = q1.new Choice(1, "선택지 예시1");

        q1.addChoice(0, "static 키워드가 필요하다.");
        q1.addChoice(1, "바깥 클래스의 인스턴스에 소속된다.");
        q1.addChoice(2, "독릭적으로 존재할 수 있다.");
        q1.addChoice(3, "바깥 클래스 필드에 접근할 수 없다.");

        q1.printQuestion();

        /*
        ! 내부클래스 사용시 주의 사항
        q. 왜 내부클래스를 정의할때 정적 내부클래스를 권장하는지 설명해주세요
        -> 메모리 누수때문!

        선택지 인스턴스는 반드시 문제 인스턴스 안에서만 생성될 수 있다.
        -> 선택지는 항상 문제 객체를 참조하고 있는 상태

        인스턴스가 더이상 사용되지 않는 상황이 올 때,
        GC에 의해 수고되어야 하는 상황이어야 한다.
        하지만, 선택지 인스턴스가 외부로 노출되서(주소) 다른 객체들이 사용하고 있다면,
        선택지가 문제를 참조하고 있으므로, GC가 수거하지 않게 된다.

        -> 문제는 사용되지 않는데도, 메모리에서 사라지지 않게 되고,
        누적이 되면서 메모리누수로 이어진다.

        따라서, 정적 중첩 클래스를 사용하는게 권장된다.

        혹은, 아래와 같은 방법으로 안전하게 설계해야 한다.
        1. 내부 클래스의 생성자를 private로 만들어서 외부에서 생성하는걸 막아준다.
        2. 내부 클래스는 외부클래스의 메서드로만 생성되고,
            생성된 객체는 외부에 노출되지 않게 private 필드에만 저장한다.

         */

    }
}
